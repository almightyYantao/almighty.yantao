<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>openvpn on Almighty.YanTao</title>
    <link>/tags/openvpn/</link>
    <description>Recent content in openvpn on Almighty.YanTao</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 16 Feb 2023 00:00:00 +0800</lastBuildDate><atom:link href="/tags/openvpn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>清理自定义DHCP下发，异常断开导致IP地址占用的问题</title>
      <link>/2023/02/16/%E6%B8%85%E7%90%86%E8%87%AA%E5%AE%9A%E4%B9%89dhcp%E4%B8%8B%E5%8F%91%E5%BC%82%E5%B8%B8%E6%96%AD%E5%BC%80%E5%AF%BC%E8%87%B4ip%E5%9C%B0%E5%9D%80%E5%8D%A0%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98.html/</link>
      <pubDate>Thu, 16 Feb 2023 00:00:00 +0800</pubDate>
      
      <guid>/2023/02/16/%E6%B8%85%E7%90%86%E8%87%AA%E5%AE%9A%E4%B9%89dhcp%E4%B8%8B%E5%8F%91%E5%BC%82%E5%B8%B8%E6%96%AD%E5%BC%80%E5%AF%BC%E8%87%B4ip%E5%9C%B0%E5%9D%80%E5%8D%A0%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98.html/</guid>
      <description>背景 因为OpenVpn存在断开重连的机制，如果突然出现网络抖动，用户端没有触发断开命令，但是同时又触发了重新连接的命令，这时候VPN这里就会重新给下发一个新的地址，但是老的地址不会回收掉，这个也是很早之前DHCP被用完的真正原因
处理方式 在每一台openvpn的机器上新增一个shell脚本做定时任务，每天临晨2点开始循环遍历
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #!/bin/bash IFS=$&amp;#39;\n&amp;#39; # 修改默认分隔符 OLDIFS=&amp;#34;$IFS&amp;#34; # 清理无效的IP地址 function clearIp(){ # 取出当前已经分配下去的所有IP地址 result=$(curl -s &amp;#34;后端获取当前使用IP的接口地址&amp;#34;); ipList=`echo $result | jq &amp;#39;.</description>
    </item>
    
    <item>
      <title>安装&amp;破解Openvpn Access Server</title>
      <link>/2023/01/05/%E5%AE%89%E8%A3%85%E7%A0%B4%E8%A7%A3openvpn-access-server.html/</link>
      <pubDate>Thu, 05 Jan 2023 00:00:00 +0800</pubDate>
      
      <guid>/2023/01/05/%E5%AE%89%E8%A3%85%E7%A0%B4%E8%A7%A3openvpn-access-server.html/</guid>
      <description>在线安装（需要翻墙） 1 2 yum -y install https://as-repository.openvpn.net/as-repo-centos7.rpm yum -y install openvpn-as 管理员登录 首先需要修改管理员密码
1 passwd openvpn 输入之后可以登录管理员页面了。
如果密码一直错误的话，说明修改失败了，可以查看下原来的密码是什么
1 cat /usr/local/openvpn_as/init.log 登录后点击User Management–&amp;gt;User Permissions 添加用户
破解用户数 主要操作的文件是一个名叫 pyovpn-2.0-pyx.x.egg 的文件，以我了解的情况来看，从 2.5.0 到 2.9.x 文件名一直都是这个，只是不同版本里面的内容不一样. 这个文件有点类似 Java 当中的 jar 库文件，也是一个 zip 压缩文件，里面包含了一些 Python 的字节码文件. 破解的原理大概是在 Python 中采用类似 Java 动态代理的技术，将原本读取用户属性的调用返回值拦截，修改用户限制数量再返回. 方法 2.9.0 以下版本破解的目标文件是 /pyovpn/lic/uprop.pyo, 2.9.0 及以上是 /pyovpn/lic/uprop.pyc; 按照网上流行的破解方法，把这个文件解压出来并改名为 uprop2.pyo 或 uprop2.pyc, 然后新建一个 uprop.py 文件，内容如下:
**2.9.0**以下版本内容:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import uprop2 old_figure = None def new_figure(self, licdict): ret = old_figure(self, licdict) ret[&amp;#39;concurrent_connections&amp;#39;] = 1024 return ret for x in dir(uprop2): if x[:2] == &amp;#39;__&amp;#39;: continue if x == &amp;#39;UsageProperties&amp;#39;: exec(&amp;#39;old_figure = uprop2.</description>
    </item>
    
    <item>
      <title>openvpn动态下发权限</title>
      <link>/2022/12/14/openvpn%E5%8A%A8%E6%80%81%E4%B8%8B%E5%8F%91%E6%9D%83%E9%99%90.html/</link>
      <pubDate>Wed, 14 Dec 2022 00:00:00 +0800</pubDate>
      
      <guid>/2022/12/14/openvpn%E5%8A%A8%E6%80%81%E4%B8%8B%E5%8F%91%E6%9D%83%E9%99%90.html/</guid>
      <description>首先了解我们为什么要动态下发 开源的openvpn并不支持权限管理，大部分在做权限管理的时候使用的都是根据来源IP或IP段通过iptables/交换机来进行权限控制 权限控制太广了，根本无法很好的去做管理后台的配置，特别是需要用户组来进行区分的时候，那就更困难了 权限下发的逻辑 {% plantuml %}
title openvpn连接示意图 用户 -&amp;gt; openvpn:通过公网连接openvpn openvpn-&amp;gt;openvpn:下发IP地址，设置动态权限 openvpn-&amp;gt;用户:完成连接 {% endplantuml %}
用到的技术 ipset iptables 主要脚本内容 连接脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 /sbin/ipset create ${common_name}-${common_ip} hash:ip /sbin/ipset create ${common_name}-${common_ip}-drop hash:ip # 这里是动态去你的后端获取出来的允许访问的列表，接口自己去实现 for index in `seq 0 $permissionsAcceptLength`; do /sbin/ipset add ${common_name}-${common_ip} ${permissionsAccept[$index]//\&amp;#34;/} done for index in `seq 0 $permissionsDropLength`; do /sbin/ipset add ${common_name}-${common_ip}-drop ${permissionsDrop[$index]//\&amp;#34;/} done # 设置iptables /sbin/iptables -A FORWARD -s $common_ip -m set --match-set ${common_name}-${common_ip} dst -j ACCEPT /sbin/iptables -A FORWARD -s $common_ip -m set --match-set ${common_name}-${common_ip}-drop dst -j DROP /sbin/iptables -A FORWARD -s $common_ip -j DROP 断开脚本 1 2 3 4 5 /sbin/iptables -D FORWARD -s $ifconfig_pool_remote_ip -m set --match-set ${common_name}-${ifconfig_pool_remote_ip} dst -j ACCEPT /sbin/iptables -D FORWARD -s $ifconfig_pool_remote_ip -m set --match-set ${common_name}-${ifconfig_pool_remote_ip}-drop dst -j DROP /sbin/iptables -D FORWARD -s $ifconfig_pool_remote_ip -j DROP /sbin/ipset destroy ${common_name}-${ifconfig_pool_remote_ip} /sbin/ipset destroy ${common_name}-${ifconfig_pool_remote_ip}-drop 如果在运行的过程中出现脚本权限不足 1 2 3 chmod 766 connect.</description>
    </item>
    
    <item>
      <title>openvpn-auth（支持企业微信认证&amp;LDAP）</title>
      <link>/2022/12/13/openvpn-auth%E6%94%AF%E6%8C%81%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E8%AE%A4%E8%AF%81ldap.html/</link>
      <pubDate>Tue, 13 Dec 2022 00:00:00 +0800</pubDate>
      
      <guid>/2022/12/13/openvpn-auth%E6%94%AF%E6%8C%81%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E8%AE%A4%E8%AF%81ldap.html/</guid>
      <description>方案介绍 时序图 openvpn-auth 时序图 其中有两个地方需要修改 corpid: 企业微信的企业ID corpsecret: 拥有通讯录的企业微信的Secret 代码如下 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 package auth import ( &amp;#34;io/ioutil&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;strconv&amp;#34; &amp;#34;github.com/tidwall/gjson&amp;#34; ) func GetAccessToken() string { return GetWecomToken() } // 从企业微信获取Token func GetWecomToken() string { //创建一个请求 req, err := http.</description>
    </item>
    
  </channel>
</rss>
